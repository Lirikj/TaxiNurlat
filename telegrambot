from telebot import telebot, types
from datetime import datetime
import sqlite3

def init_db():
    try:
        conn = sqlite3.connect('Taxi_users.db')
        c = conn.cursor()

        c.execute('''CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        username TEXT,
                        first_name TEXT,
                        last_name TEXT,
                        date_joined TEXT,
                        Number INTEGER, 
                        ban INTEGER DEFAULT 0
                )''')

        conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        if conn:
            conn.close()


def user_exists(user_id):
    try:
        conn = sqlite3.connect('Taxi_users.db')
        c = conn.cursor()
        c.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user = c.fetchone()

        return user is not None  
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False
    finally:
        if conn:
            conn.close()


def add_user_to_db(user_id, username, first_name, last_name, number):
    try:
        conn = sqlite3.connect('Taxi_users.db')
        c = conn.cursor()
        c.execute('''INSERT INTO users (user_id, username, first_name, last_name, date_joined, Number) 
                     VALUES (?, ?, ?, ?, ?, ?)''',
                  (user_id, username, first_name, last_name, 
                   datetime.now().strftime("%Y-%m-%d %H:%M:%S"), number))

        conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        if conn:
            conn.close()


bot = telebot.TeleBot('6423951514:AAE848xYBRpAx92gihFxrnWyXr70-ULgev0')


@bot.message_handler(commands=['start', 'st', 'mn', 'menu'])
def start_message(message):
    user = message.from_user
    user_id = message.from_user.id
    first_name = user.first_name
    last_name = user.last_name if user.last_name else ''
    username = message.from_user.username

    if user_exists(user_id): 
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {first_name}')
    else: 
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        get_phone = types.KeyboardButton('üìû–í–∞—à –Ω–æ–º–µ—Ä', request_contact=True) 
        markup.add(get_phone)
        number = bot.send_message(message.chat.id, 
                                  'üöï–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏.\n–ß—Ç–æ–± –∑–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏ –º–Ω–µ –Ω—É–∂–µ–Ω —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–¥–µ—é—Å—å —Ç—ã –Ω–µ –ø—Ä–æ—Ç–∏–≤?', 
                                  reply_markup=markup) 
        bot.register_next_step_handler(number, registration_user, user_id, username, first_name, last_name) 


def registration_user(message, user_id, username, first_name, last_name):
    if message.contact is not None:
        phone_number = message.contact.phone_number
        add_user_to_db(user_id, username, first_name, last_name, phone_number)
        bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω.')
    else:
        number = bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω.')
        bot.register_next_step_handler(number, registration_user, user_id, username, first_name, last_name) 


init_db()
bot.polling()